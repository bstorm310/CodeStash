#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CodeStash.iOS.ViewControllers.PullRequests
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class CommentCellView : CommentCellViewBase
{

#line hidden

#line 1 "CommentCellView.cshtml"
public List<AtlassianStashSharp.Models.Activity> Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<html><head>\n<meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable" +
"=0\"");

WriteLiteral("/>\n<script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\nfunction size() { return document.getElementById(\'main\').scrollHeight + 0; }\nfu" +
"nction rs() { document.location.href = \'app://resize\'; }; window.onsize = rs;\nva" +
"r h = 0; setInterval(function() { if (size() != h) { h = size(); rs(); } }, 100)" +
";\n</script>\n<style>\n* {\n-webkit-touch-callout: none;\n-webkit-user-select: none;\n" +
"font-family: Helvetica;\nfont-size: 13px;\n}\n\nbody{\nfont-family: Helvetica;\nfont-s" +
"ize: 13px;\nmargin: 0px;\n}\n\n.comment:first-child {\nborder-top: none;\n}\n\n.comment " +
"{\nborder-top: 1px solid #c8c8c8;\npadding: 8px 6px 2px;\n}\n\n.comment > img{\npositi" +
"on: absolute;\nwidth: 32px;\nheight: 32px;\n}\n\n.comment > div {\ndisplay: inline-blo" +
"ck;\npadding-left: 40px;\nbox-sizing: border-box;\nwidth: 100%;\n}\n\n.comment > div >" +
" h1 {\nfont-size: 14px;\nmargin: 1px 0 2px 0;\ncolor: #406fb9;\nwhite-space: nowrap;" +
"\noverflow: hidden;\n}\n\n.comment > div > span {\nfont-size: 11px;\nmargin: 0;\ncolor:" +
" #404040;\nwhite-space: nowrap;\noverflow: hidden;\n}\n\n.comment > div > div {\nmargi" +
"n: 0;\nword-wrap: break-word;\n}\n\n.comment > div > div img {\nmax-width: 100%;\n}\n\n#" +
"main { width: 100%; }\n\nimg { max-width: 100%; } \np { margin: 10px 0; white-space" +
": pre-wrap; } \npre, li, ul { word-wrap: break-word; } \n\n.mark h1, .mark h2, .mar" +
"k h3, .mark h4, .mark h5, .mark h6 {\nmargin: 1em 0 15px;\npadding: 0;\nfont-weight" +
": bold;\nline-height: 1.7;\ncursor: text;\nposition: relative;\n}\n\nul, ol {\npadding:" +
" 0;\nmargin-top: 0;\nmargin-bottom: 0;\npadding-left: 20px;\n}\n\npre {\nbackground-col" +
"or: #f8f8f8;\nborder: 1px solid #ddd;\nfont-size: 13px;\nline-height: 19px;\noverflo" +
"w: auto;\npadding: 6px 10px;\nborder-radius: 3px;\nword-wrap: normal;\n}\ndl dt {\nfon" +
"t-size: 14px;\nfont-weight: bold;\nfont-style: italic;\npadding: 0;\nmargin-top: 15p" +
"x;\n}\nblockquote {\nborder-left: 4px solid #DDD;\npadding: 0 15px;\ncolor: #777;\n}\nt" +
"able {\nwidth: 100%;\noverflow: auto;\ndisplay: block;\n}\ntable tr {\nborder-top: 1px" +
" solid #ccc;\nbackground-color: #fff;\n}\ntable th {\nfont-weight: bold;\n}\ntable th," +
" table td {\nborder: 1px solid #ddd;\npadding: 4px 11px;\n}\ntable tr:nth-child(2n) " +
"{\nbackground-color: #f8f8f8;\n}\n.mark h2 {\nfont-size: 1.2em;\nborder-bottom: 1px s" +
"olid #eee;\n}\n.mark h1 {\nfont-size: 1.6em;\nborder-bottom: 1px solid #ddd;\n}\n\n.mar" +
"k .label {\ndisplay: inline;\npadding: .2em .6em .2em;\nfont-size: 85%;\nfont-weight" +
": 700;\nline-height: 1;\ncolor: #fff;\ntext-align: center;\nwhite-space: nowrap;\nver" +
"tical-align: baseline;\nborder-radius: .25em;\n}\n.label-danger {background-color: " +
"#d04437;}\n.label-success {background-color: #14892c;}\n.label-info {background-co" +
"lor: #6e5494;}\n.label-default { background-color: #999;}\n.label-open {background" +
"-color: #4a6785;}\n.label-update { background-color: #ffd351;color: #594300 !impo" +
"rtant;}\n</style>\n</head>\n<body>\n<div");

WriteLiteral(" id=\"main\"");

WriteLiteral(">\n\n");


#line 165 "CommentCellView.cshtml"
	

#line default
#line hidden

#line 165 "CommentCellView.cshtml"
  foreach (var activity in @Model)
	{


#line default
#line hidden
WriteLiteral("\t\t<div");

WriteLiteral(" class=\'comment\'");

WriteLiteral(">\n\t\t\t<img");

WriteAttribute ("src", " src=\"", "\""

#line 168 "CommentCellView.cshtml"
, Tuple.Create<string,object,bool> ("", MonoTouch.Foundation.NSBundle.MainBundle.BundleUrl

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", "Images/avatar.png", true)
);
WriteLiteral(" />\n\t\t\t<div>\n\t\t\t<h1>");


#line 170 "CommentCellView.cshtml"
  Write(activity.User.DisplayName);


#line default
#line hidden
WriteLiteral("</h1>\n\t\t\t<span>");


#line 171 "CommentCellView.cshtml"
    Write(AtlassianStashSharp.Helpers.UnixDateTimeHelper.FromUnixTime(activity.CreatedDate).ToDaysAgo());


#line default
#line hidden
WriteLiteral("</span>\n\t\t\t<div");

WriteLiteral(" class=\"mark\"");

WriteLiteral(">\n");


#line 173 "CommentCellView.cshtml"
				

#line default
#line hidden

#line 173 "CommentCellView.cshtml"
     if (string.Equals(activity.Action, "COMMENTED", StringComparison.OrdinalIgnoreCase))
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t\t<p>");


#line 175 "CommentCellView.cshtml"
   Write(activity.Comment.Text);


#line default
#line hidden
WriteLiteral("</p>\n");


#line 176 "CommentCellView.cshtml"
				}            
				else if (string.Equals(activity.Action, "RESCOPED", StringComparison.OrdinalIgnoreCase))
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t\t<p><span");

WriteLiteral(" class=\"label label-update\"");

WriteLiteral(">Updated</span> the pull request.</p>\n");


#line 180 "CommentCellView.cshtml"
				}
				else if (string.Equals(activity.Action, "OPENED", StringComparison.OrdinalIgnoreCase))
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t\t<p><span");

WriteLiteral(" class=\"label label-open\"");

WriteLiteral(">Opened</span> the pull request.</p>\n");


#line 184 "CommentCellView.cshtml"
				}
				else if (string.Equals(activity.Action, "MERGED", StringComparison.OrdinalIgnoreCase))
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t\t<p><span");

WriteLiteral(" class=\"label label-success\"");

WriteLiteral(">Merged</span> this pull request.</p>\n");


#line 188 "CommentCellView.cshtml"
				}
				else if (string.Equals(activity.Action, "APPROVED", StringComparison.OrdinalIgnoreCase))
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t\t<p><span");

WriteLiteral(" class=\"label label-success\"");

WriteLiteral(">Approved</span> this pull request.</p>\n");


#line 192 "CommentCellView.cshtml"
				}
				else if (string.Equals(activity.Action, "DECLINED", StringComparison.OrdinalIgnoreCase))
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t\t<p><span");

WriteLiteral(" class=\"label label-danger\"");

WriteLiteral(">Declined</span> this pull request.</p>\n");


#line 196 "CommentCellView.cshtml"
				}
				else
				{


#line default
#line hidden
WriteLiteral("\t\t\t\t\t<p><span");

WriteLiteral(" class=\"label label-default\"");

WriteLiteral(">");


#line 199 "CommentCellView.cshtml"
                                     Write(activity.Action);


#line default
#line hidden
WriteLiteral("</span> the pull request</p>\n");


#line 200 "CommentCellView.cshtml"
				}


#line default
#line hidden
WriteLiteral("\n\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n");


#line 205 "CommentCellView.cshtml"
	}


#line default
#line hidden
WriteLiteral("\n</div>\n</body>\n</html>\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class CommentCellViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
